/*
 * motor.c
 *
 *  Created on: 2018/04/14
 *      Author: shts
 */
#include "iodefine.h"
#include "motor.h"
#include "math.h"
#include "serial.h"
#include "util.h"
#include "MTU.h"
#include "LED.h"

MOT r_motor, l_motor;
extern VEH vehicle;
extern SPC spec;

void init_Motor(void) {
	/*r_motor.min_acc = 0.0;
	 l_motor.min_acc = 0.0;
	 r_motor.max_acc = 1500;
	 l_motor.max_acc = 1500;*/

	spec.motor_max_acc = 1700;
	spec.motor_max_vel = 1000;
	spec.motor_min_acc = 0;
	spec.motor_min_vel = 250;
	r_motor.acc = 0.0;
	l_motor.acc = 0.0;
	/*

	 r_motor.min_vel = 200.0;
	 l_motor.min_vel = 200.0;
	 r_motor.max_vel = 2000.0;
	 l_motor.max_vel = 2000.0;
	 */
	r_motor.vel = 250.0;
	l_motor.vel = 250.0;

	r_motor.cnt = 0.0;
	l_motor.cnt = 0.0;

	r_motor.end_flag = 0.0;
	l_motor.end_flag = 0.0;
	r_motor.stop_flag = 0.0;
	l_motor.stop_flag = 0.0;

	r_motor.rot_dir_flag = 0;
	l_motor.rot_dir_flag = 1;

	r_motor.dist = 0.0;

	PE.DRL.BIT.B2 = 1; //reset (0 : off, 1 : on)
	PE.DRL.BIT.B3 = 0; //excitation_enable (1 : on, 0 : off)

	PE.DRL.BIT.B1 = 0; //R_CW/CCW(0 : forward, 1 : backward)
	PE.DRL.BIT.B5 = 1; //L_CW/CCW(1 : forward, 0 : backward)

	PE.DRL.BIT.B0 = 1; //R_Clock
	PE.DRL.BIT.B4 = 1; //L_Clock

	PE.DRL.BIT.B2 = 0; //reset(0 : off, 1 : on)
}

void switch_Motor(char sw) {
	if (sw == on) {
		PE.DRL.BIT.B3 = 1;
	} else {
		PE.DRL.BIT.B3 = 0;
	}
}

void drv_Motor(float dist, float vel, float acc, float ang, float rot_vel,
		float rot_acc, float mot_acc, unsigned char stop_flag,
		unsigned char direction) {
	/*
	 * direction : left or right (enum)
	 * select_flag : sla_on or sla_off (enum)
	 * stop_flag : on or off (enum)
	 * */
	float deceleration;
//上下限設定
	if (mot_acc > spec.motor_max_acc) {
		mot_acc = spec.motor_max_acc;
	}

	//直進判定
	if (ang == 0.0) {
		vehicle.select_flag = sla_off;
	} else {
		vehicle.select_flag = sla_on;
	}

	//減速時パターン分け
	switch (stop_flag) {
	case off:
		//代入(加速のみ)
		r_motor.cnt = 0.0;
		l_motor.cnt = 0.0;
		r_motor.acc = mot_acc;
		l_motor.acc = mot_acc;
		vehicle.tar_dist = dist;
		vehicle.dist = 0;
		vehicle.tar_vel = vel;
		vehicle.tar_acc = acc;
		vehicle.tar_ang = ang;
		vehicle.tar_rot_vel = rot_vel;
		vehicle.tar_rot_acc = rot_acc;
		vehicle.end_flag = 0;
		vehicle.ang = 0;
		start_MTU(cst0);
		start_MTU(cst1);
		while (vehicle.end_flag <= 0)
			;

		break;
	case on:
		if (vehicle.select_flag == sla_off) {
			deceleration = (vel * vel - spec.motor_min_vel * spec.motor_min_vel)
					/ (2 * acc);
			if (deceleration >= dist) {
				deceleration = dist;
			}
		} else {
			deceleration = (rot_vel * rot_vel) / (2 * rot_acc);
			if (deceleration >= ang) {
				deceleration = ang;
			}
			if (direction == right) {
				deceleration *= -1;
			}
		}

		//代入(加速フェーズ)
		if (vehicle.select_flag == sla_off) {
			vehicle.tar_dist = dist - deceleration;
			vehicle.tar_vel = vel;
			vehicle.tar_acc = acc;
			vehicle.tar_ang = ang;
			vehicle.tar_rot_vel = rot_vel;
			vehicle.tar_rot_acc = rot_acc;
			vehicle.end_flag = 0;
		} else {
			vehicle.tar_dist = dist;
			vehicle.tar_vel = vel;
			vehicle.tar_acc = acc;
			vehicle.tar_ang = ang - deceleration;
			vehicle.tar_rot_vel = rot_vel;
			vehicle.tar_rot_acc = rot_acc;
			vehicle.end_flag = 0;
		}
		r_motor.cnt = 0.0;
		l_motor.cnt = 0.0;
		r_motor.dist = 0.0;
		l_motor.dist = 0.0;
		r_motor.acc = mot_acc;
		l_motor.acc = mot_acc;
		vehicle.dist = 0;
		vehicle.ang = 0;
		start_MTU(cst0);
		start_MTU(cst1);
		myprintf("%s\n",
				"r_motor.vel, vehicle.vel, vehicle.tar_vel, r_motor.dist, vehicle.dist, vehicle.tar_dist");
		while (vehicle.end_flag <= 0) {
			myprintf("%f,%f,%f,%f,%f,%f\n", l_motor.vel, r_motor.vel, vehicle.vel,vehicle.tar_vel, r_motor.dist, vehicle.dist,vehicle.tar_dist);
		}
		drv_Status_LED(Green, on);
		//代入(減速フェーズ)
		if (vehicle.select_flag == sla_off) {
			vehicle.tar_dist = deceleration;
			vehicle.tar_vel = spec.motor_min_vel;
			vehicle.tar_acc = acc;
			vehicle.tar_ang = ang;
			vehicle.tar_rot_vel = rot_vel;
			vehicle.tar_rot_acc = rot_acc;
			vehicle.end_flag = 0;
		} else {
			vehicle.tar_dist = dist;
			vehicle.tar_vel = vel;
			vehicle.tar_acc = acc;
			vehicle.tar_ang = deceleration;
			vehicle.tar_rot_vel = rot_vel;
			vehicle.tar_rot_acc = rot_acc;
			vehicle.end_flag = 0;
		}
		r_motor.cnt = 0.0;
		l_motor.cnt = 0.0;
		r_motor.dist = 0.0;
		l_motor.dist = 0.0;
		r_motor.acc = mot_acc;
		l_motor.acc = mot_acc;
		vehicle.dist = 0;
		vehicle.ang = 0;
		while (vehicle.end_flag <= 0) {
			myprintf("%f,%f,%f,%f,%f,%f\n", r_motor.vel, vehicle.vel,
					vehicle.tar_vel, r_motor.dist, vehicle.dist,
					vehicle.tar_dist);
		}
		drv_Status_LED(Yerrow, on);
		stop_MTU(cst0);
		stop_MTU(cst1);
		break;
	}
}

void mot_app(float dist, float t_vel, int t_acc, char move_flag, char end_flag) {

	int decel_dist;
	decel_dist = (t_vel * t_vel - spec.motor_min_vel * spec.motor_min_vel)
			/ (2 * t_acc);
	if (move_flag == straight) {
		spec.cnt_ctl = 0;
	} else {
		spec.cnt_ctl = 1;
	}

	start_MTU(cst0);
	start_MTU(cst1);

	if (dist >= decel_dist) {
//		drv_Motor(dist - decel_dist, t_vel, t_acc, move_flag & 1, end_flag,
//				R_motor);
//		drv_Motor(dist - decel_dist, t_vel, t_acc, (move_flag & 2) >> 1,
//				end_flag, L_motor);
//		while (1) {
//			if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
//				break;
//			}
//		}
//
//		drv_Motor(decel_dist, spec.motor_min_vel, t_acc, move_flag & 1, end_flag,
//				R_motor);
//		drv_Motor(decel_dist, spec.motor_min_vel, t_acc, (move_flag & 2) >> 1,
//				end_flag, L_motor);

		while (1) {
			if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
				break;
			}
		}
	} else {
//		drv_Motor(dist, spec.motor_min_vel, t_acc, move_flag & 1, end_flag,
//				R_motor);
//		drv_Motor(dist, spec.motor_min_vel, t_acc, (move_flag & 2) >> 1, end_flag,
//				L_motor);

		while (1) {
			if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
				break;
			}
		}
	}
	stop_MTU(cst0);
	stop_MTU(cst1);

	spec.cnt_ctl = 0;
}

void mot_app2(float dist, float t_vel, int t_acc, char move_flag, char end_flag) {

	if (move_flag == straight) {
		spec.cnt_ctl = 0;
	} else {
		spec.cnt_ctl = 1;
	}

	start_MTU(cst0);
	start_MTU(cst1);

//	drv_Motor(dist, t_vel, t_acc, move_flag & 1, end_flag, R_motor);
//	drv_Motor(dist, t_vel, t_acc, (move_flag & 2) >> 1, end_flag, L_motor);

	while (1) {
		if (l_motor.stop_flag == 1 || r_motor.stop_flag == 1) {
			break;
		}
	}
	spec.cnt_ctl = 0;
}

void move_test(float angle, float omega) {
	//mot_sla_app(180, 330, angle, omega, 1500, on);
}

void move_Left() {
	spec.kp_r -= 0.1;
	spec.kp_l -= 0.1;
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.l_distance, 250, 1700, left, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app2(spec.half_block, 330, 1700, straight, on);
	spec.kp_r += 0.1;
	spec.kp_l += 0.1;
}

void move_Right() {
	spec.kp_r -= 0.1;
	spec.kp_l -= 0.1;
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.r_distance, 250, 1700, right, on);
	wait_ms(10);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app2(spec.half_block, 330, 1700, straight, on);
	spec.kp_r += 0.1;
	spec.kp_l += 0.1;
}

void move_Forward() {
	spec.kp_r += 0.1;
	spec.kp_l += 0.1;
	mot_app2(spec.full_block, 330, 1700, straight, on);
	spec.kp_r -= 0.1;
	spec.kp_l -= 0.1;
}

void move_Backward() {
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(290);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.r_distance * 2, 250, 1700, right, on);
	wait_ms(10);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.half_block, 250, 1700, back, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(200);
	mot_app2(30 + spec.half_block, 330, 1500, straight, on);
}

void move_Backward_2() {
	mot_app(spec.half_block, 330, 1700, straight, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app(spec.r_distance * 2, 250, 1700, right, on);
	wait_ms(100);
	switch_Motor(off);
	wait_ms(200);
	switch_Motor(on);
	wait_ms(100);
	mot_app2(spec.half_block, 330, 1700, straight, on);
}

// void drv_Motor(float dist, float t_vel, int t_acc, char rot_dir_flag,
// char end_flag, char ch) {
//
// //	 rot_dir
// //	 1 : forward
// //	 0 : backward
//
//
// if (t_acc > spec.motor_max_acc) {
// t_acc = spec.motor_max_acc;
// } else if (t_acc < spec.motor_min_acc) {
// t_acc = spec.motor_min_acc;
// }
//
// if (t_vel > spec.motor_max_vel) {
// t_vel = spec.motor_max_vel;
// } else if (t_vel < spec.motor_min_vel) {
// t_vel = spec.motor_min_vel;
// }
//
// PE.DRL.BIT.B2 = 1; //reset(0 : off, 1 : on)
// switch (ch) {
// case R_motor:
// r_motor.cnt = dist / spec.step_dist;
// r_motor.tar_vel = t_vel;
// r_motor.acc = t_acc;
// r_motor.rot_dir_flag = !rot_dir_flag; //R_CW/CCW(0 : forward, 1 : backward)
// PE.DRL.BIT.B1 = r_motor.rot_dir_flag;
// r_motor.end_flag = end_flag;
// r_motor.stop_flag = 0;
// break;
// case L_motor:
// l_motor.cnt = dist / spec.step_dist;
// l_motor.tar_vel = t_vel;
// l_motor.acc = t_acc;
// l_motor.rot_dir_flag = rot_dir_flag; //L_CW/CCW(1 : forward, 0 : backward)
// PE.DRL.BIT.B5 = l_motor.rot_dir_flag;
// l_motor.end_flag = end_flag;
// l_motor.stop_flag = 0;
// break;
// }
// PE.DRL.BIT.B2 = 0; //reset(0 : off, 1 : on)
// }
